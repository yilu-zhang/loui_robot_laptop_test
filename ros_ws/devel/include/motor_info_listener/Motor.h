// Generated by gencpp from file motor_info_listener/Motor.msg
// DO NOT EDIT!


#ifndef MOTOR_INFO_LISTENER_MESSAGE_MOTOR_H
#define MOTOR_INFO_LISTENER_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_info_listener
{
template <class ContainerAllocator>
struct Motor_
{
  typedef Motor_<ContainerAllocator> Type;

  Motor_()
    : current(0)
    , velocity(0)
    , position(0)  {
    }
  Motor_(const ContainerAllocator& _alloc)
    : current(0)
    , velocity(0)
    , position(0)  {
  (void)_alloc;
    }



   typedef int16_t _current_type;
  _current_type current;

   typedef int16_t _velocity_type;
  _velocity_type velocity;

   typedef int16_t _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::motor_info_listener::Motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_info_listener::Motor_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_

typedef ::motor_info_listener::Motor_<std::allocator<void> > Motor;

typedef boost::shared_ptr< ::motor_info_listener::Motor > MotorPtr;
typedef boost::shared_ptr< ::motor_info_listener::Motor const> MotorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_info_listener::Motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_info_listener::Motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_info_listener

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'motor_info_listener': ['/home/yiluzhang/code/loui_robot_laptop_test/ros_ws/src/motor_info_listener/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_info_listener::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_info_listener::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_info_listener::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_info_listener::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_info_listener::Motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_info_listener::Motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_info_listener::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26411605b4fae1f6e867c4d5a5f569df";
  }

  static const char* value(const ::motor_info_listener::Motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26411605b4fae1f6ULL;
  static const uint64_t static_value2 = 0xe867c4d5a5f569dfULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_info_listener::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_info_listener/Motor";
  }

  static const char* value(const ::motor_info_listener::Motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_info_listener::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 current\n\
int16 velocity\n\
int16 position\n\
\n\
";
  }

  static const char* value(const ::motor_info_listener::Motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_info_listener::Motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current);
      stream.next(m.velocity);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_info_listener::Motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_info_listener::Motor_<ContainerAllocator>& v)
  {
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
    s << indent << "velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_INFO_LISTENER_MESSAGE_MOTOR_H
